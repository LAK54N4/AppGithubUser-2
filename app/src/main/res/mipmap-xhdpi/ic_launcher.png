package com.laksana.kemirimall.ui.home

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import androidx.annotation.RequiresApi
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.RecyclerView.HORIZONTAL
import androidx.recyclerview.widget.RecyclerView.VERTICAL
import com.bumptech.glide.Glide
import com.laksana.kemirimall.DBqueries
//import com.laksana.kemirimall.DBqueries.lists
//import com.laksana.kemirimall.DBqueries.loadCategories
//import com.laksana.kemirimall.DBqueries.loadCategoriesName
//import com.laksana.kemirimall.DBqueries.loadFragmentData
import com.laksana.kemirimall.R
import com.laksana.kemirimall.adapter.CategoryAdapter
import com.laksana.kemirimall.adapter.HomePageAdapter
import com.laksana.kemirimall.model.CategoryModel
import com.laksana.kemirimall.model.HomePageModel
import com.laksana.kemirimall.model.SliderModel

class HomeFragment : Fragment() {

    private var categoryRecyclerView: RecyclerView? = null
    var categoryAdapter: ArrayList<CategoryModel> = ArrayList()   // List<CategoryModel>
    //private var homePageModelList: MutableList<HomePageModel> = mutableListOf()

    //private var adapter: HomePageAdapter? = HomePageAdapter(homePageModelList)
    private lateinit var homePageRecyclerView: RecyclerView
    private var homePageModelList: ArrayList<HomePageModel> = ArrayList()

    //private lateinit var homePageRVAdapter: ArrayList<HomePageModel>
    private val sliderModelList: MutableList<SliderModel> = ArrayList()

    //private val db = FirebaseFirestore.getInstance()

    private lateinit var adapter: HomePageAdapter

    private lateinit var noInternetConnection: ImageView

    private val dBqueries : DBqueries = DBqueries()
    private var postList: List<HomePageModel> = ArrayList()




    @RequiresApi(Build.VERSION_CODES.M)
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_home, container, false)
        noInternetConnection = view.findViewById(R.id.no_internet_connection)

        fun isNetworkAvailable(context: Context): Boolean {
            (context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager).apply {
                return getNetworkCapabilities(activeNetwork)?.run {
                    when {
                        hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> true
                        hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> true
                        hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> true
                        else -> false
                    }
                } ?: false
            }
        }
        //if(networkInfo != null && networkInfo.isConnected() == true){
        /*if(isNetworkAvailable(requireContext())){
            noInternetConnection.visibility = View.GONE
            if(showCart) {
                DrawerLayout.LOCK_MODE_LOCKED_CLOSED
                supportActionBar!!.setDisplayHomeAsUpEnabled(true)
                gotoFragment("My Cart", MyCartFragment(), -2)
            } else {
                val toggle: ActionBarDrawerToggle = ActionBarDrawerToggle (
                    this, drawerLayout, toolbar,
                    R.string.navigation_drawer_open,
                    R.string.navigation_drawer_close)
                //"Open navigation drawer", // "Open navigation drawer"
                //"Close navigation drawer") // "Close navigation drawer"

                drawerLayout.addDrawerListener(toggle)
                toggle.syncState()
                setFragment(HomeFragment(), HOME_FRAGMENT)
            }
        } else {
            Glide.with(this).load(R.drawable.nointernetconnection)
                .into(noInternetConnection)
            noInternetConnection.visibility = View.VISIBLE

        }
*/

        @RequiresApi(Build.VERSION_CODES.M)
        fun isOnline(): Boolean {
            val connectivityManager = requireActivity().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
            val capabilities =
                connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork)
            if (capabilities != null) {
                when {
                    capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> {
                        Log.i("Internet", "NetworkCapabilities.TRANSPORT_CELLUL